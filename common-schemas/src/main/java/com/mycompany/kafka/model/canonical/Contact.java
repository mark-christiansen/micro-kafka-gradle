/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mycompany.kafka.model.canonical;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Contact extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2790386727259627197L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Contact\",\"namespace\":\"com.mycompany.kafka.model.canonical\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"firstName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"middleName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"socialSecurityNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"birthDate\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}],\"default\":null},{\"name\":\"addresses\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ContactAddress\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"contactId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"addressLine1\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"addressLine2\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"addressLine3\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"city\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"state\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"postalCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"created\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"updated\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"sourceType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"sourceId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]},\"default\":[]}],\"default\":null},{\"name\":\"created\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"updated\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"sourceType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"sourceId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<Contact> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Contact> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Contact> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Contact> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Contact> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Contact to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Contact from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Contact instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Contact fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private java.lang.String firstName;
  private java.lang.String middleName;
  private java.lang.String lastName;
  private java.lang.String socialSecurityNumber;
  private java.time.LocalDate birthDate;
  private java.util.List<com.mycompany.kafka.model.canonical.ContactAddress> addresses;
  private java.time.Instant created;
  private java.time.Instant updated;
  private java.lang.String source;
  private java.lang.String sourceType;
  private java.lang.String sourceId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Contact() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param firstName The new value for firstName
   * @param middleName The new value for middleName
   * @param lastName The new value for lastName
   * @param socialSecurityNumber The new value for socialSecurityNumber
   * @param birthDate The new value for birthDate
   * @param addresses The new value for addresses
   * @param created The new value for created
   * @param updated The new value for updated
   * @param source The new value for source
   * @param sourceType The new value for sourceType
   * @param sourceId The new value for sourceId
   */
  public Contact(java.lang.String id, java.lang.String firstName, java.lang.String middleName, java.lang.String lastName, java.lang.String socialSecurityNumber, java.time.LocalDate birthDate, java.util.List<com.mycompany.kafka.model.canonical.ContactAddress> addresses, java.time.Instant created, java.time.Instant updated, java.lang.String source, java.lang.String sourceType, java.lang.String sourceId) {
    this.id = id;
    this.firstName = firstName;
    this.middleName = middleName;
    this.lastName = lastName;
    this.socialSecurityNumber = socialSecurityNumber;
    this.birthDate = birthDate;
    this.addresses = addresses;
    this.created = created;
    this.updated = updated;
    this.source = source;
    this.sourceType = sourceType;
    this.sourceId = sourceId;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return firstName;
    case 2: return middleName;
    case 3: return lastName;
    case 4: return socialSecurityNumber;
    case 5: return birthDate;
    case 6: return addresses;
    case 7: return created;
    case 8: return updated;
    case 9: return source;
    case 10: return sourceType;
    case 11: return sourceId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: firstName = value$ != null ? value$.toString() : null; break;
    case 2: middleName = value$ != null ? value$.toString() : null; break;
    case 3: lastName = value$ != null ? value$.toString() : null; break;
    case 4: socialSecurityNumber = value$ != null ? value$.toString() : null; break;
    case 5: birthDate = (java.time.LocalDate)value$; break;
    case 6: addresses = (java.util.List<com.mycompany.kafka.model.canonical.ContactAddress>)value$; break;
    case 7: created = (java.time.Instant)value$; break;
    case 8: updated = (java.time.Instant)value$; break;
    case 9: source = value$ != null ? value$.toString() : null; break;
    case 10: sourceType = value$ != null ? value$.toString() : null; break;
    case 11: sourceId = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'firstName' field.
   * @return The value of the 'firstName' field.
   */
  public java.lang.String getFirstName() {
    return firstName;
  }


  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.String value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'middleName' field.
   * @return The value of the 'middleName' field.
   */
  public java.lang.String getMiddleName() {
    return middleName;
  }


  /**
   * Sets the value of the 'middleName' field.
   * @param value the value to set.
   */
  public void setMiddleName(java.lang.String value) {
    this.middleName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return The value of the 'lastName' field.
   */
  public java.lang.String getLastName() {
    return lastName;
  }


  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.String value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'socialSecurityNumber' field.
   * @return The value of the 'socialSecurityNumber' field.
   */
  public java.lang.String getSocialSecurityNumber() {
    return socialSecurityNumber;
  }


  /**
   * Sets the value of the 'socialSecurityNumber' field.
   * @param value the value to set.
   */
  public void setSocialSecurityNumber(java.lang.String value) {
    this.socialSecurityNumber = value;
  }

  /**
   * Gets the value of the 'birthDate' field.
   * @return The value of the 'birthDate' field.
   */
  public java.time.LocalDate getBirthDate() {
    return birthDate;
  }


  /**
   * Sets the value of the 'birthDate' field.
   * @param value the value to set.
   */
  public void setBirthDate(java.time.LocalDate value) {
    this.birthDate = value;
  }

  /**
   * Gets the value of the 'addresses' field.
   * @return The value of the 'addresses' field.
   */
  public java.util.List<com.mycompany.kafka.model.canonical.ContactAddress> getAddresses() {
    return addresses;
  }


  /**
   * Sets the value of the 'addresses' field.
   * @param value the value to set.
   */
  public void setAddresses(java.util.List<com.mycompany.kafka.model.canonical.ContactAddress> value) {
    this.addresses = value;
  }

  /**
   * Gets the value of the 'created' field.
   * @return The value of the 'created' field.
   */
  public java.time.Instant getCreated() {
    return created;
  }


  /**
   * Sets the value of the 'created' field.
   * @param value the value to set.
   */
  public void setCreated(java.time.Instant value) {
    this.created = value;
  }

  /**
   * Gets the value of the 'updated' field.
   * @return The value of the 'updated' field.
   */
  public java.time.Instant getUpdated() {
    return updated;
  }


  /**
   * Sets the value of the 'updated' field.
   * @param value the value to set.
   */
  public void setUpdated(java.time.Instant value) {
    this.updated = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.String getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.String value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'sourceType' field.
   * @return The value of the 'sourceType' field.
   */
  public java.lang.String getSourceType() {
    return sourceType;
  }


  /**
   * Sets the value of the 'sourceType' field.
   * @param value the value to set.
   */
  public void setSourceType(java.lang.String value) {
    this.sourceType = value;
  }

  /**
   * Gets the value of the 'sourceId' field.
   * @return The value of the 'sourceId' field.
   */
  public java.lang.String getSourceId() {
    return sourceId;
  }


  /**
   * Sets the value of the 'sourceId' field.
   * @param value the value to set.
   */
  public void setSourceId(java.lang.String value) {
    this.sourceId = value;
  }

  /**
   * Creates a new Contact RecordBuilder.
   * @return A new Contact RecordBuilder
   */
  public static com.mycompany.kafka.model.canonical.Contact.Builder newBuilder() {
    return new com.mycompany.kafka.model.canonical.Contact.Builder();
  }

  /**
   * Creates a new Contact RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Contact RecordBuilder
   */
  public static com.mycompany.kafka.model.canonical.Contact.Builder newBuilder(com.mycompany.kafka.model.canonical.Contact.Builder other) {
    if (other == null) {
      return new com.mycompany.kafka.model.canonical.Contact.Builder();
    } else {
      return new com.mycompany.kafka.model.canonical.Contact.Builder(other);
    }
  }

  /**
   * Creates a new Contact RecordBuilder by copying an existing Contact instance.
   * @param other The existing instance to copy.
   * @return A new Contact RecordBuilder
   */
  public static com.mycompany.kafka.model.canonical.Contact.Builder newBuilder(com.mycompany.kafka.model.canonical.Contact other) {
    if (other == null) {
      return new com.mycompany.kafka.model.canonical.Contact.Builder();
    } else {
      return new com.mycompany.kafka.model.canonical.Contact.Builder(other);
    }
  }

  /**
   * RecordBuilder for Contact instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Contact>
    implements org.apache.avro.data.RecordBuilder<Contact> {

    private java.lang.String id;
    private java.lang.String firstName;
    private java.lang.String middleName;
    private java.lang.String lastName;
    private java.lang.String socialSecurityNumber;
    private java.time.LocalDate birthDate;
    private java.util.List<com.mycompany.kafka.model.canonical.ContactAddress> addresses;
    private java.time.Instant created;
    private java.time.Instant updated;
    private java.lang.String source;
    private java.lang.String sourceType;
    private java.lang.String sourceId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mycompany.kafka.model.canonical.Contact.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.middleName)) {
        this.middleName = data().deepCopy(fields()[2].schema(), other.middleName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.lastName)) {
        this.lastName = data().deepCopy(fields()[3].schema(), other.lastName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.socialSecurityNumber)) {
        this.socialSecurityNumber = data().deepCopy(fields()[4].schema(), other.socialSecurityNumber);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.birthDate)) {
        this.birthDate = data().deepCopy(fields()[5].schema(), other.birthDate);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.addresses)) {
        this.addresses = data().deepCopy(fields()[6].schema(), other.addresses);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.created)) {
        this.created = data().deepCopy(fields()[7].schema(), other.created);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.updated)) {
        this.updated = data().deepCopy(fields()[8].schema(), other.updated);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.source)) {
        this.source = data().deepCopy(fields()[9].schema(), other.source);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.sourceType)) {
        this.sourceType = data().deepCopy(fields()[10].schema(), other.sourceType);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.sourceId)) {
        this.sourceId = data().deepCopy(fields()[11].schema(), other.sourceId);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing Contact instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mycompany.kafka.model.canonical.Contact other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.middleName)) {
        this.middleName = data().deepCopy(fields()[2].schema(), other.middleName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastName)) {
        this.lastName = data().deepCopy(fields()[3].schema(), other.lastName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.socialSecurityNumber)) {
        this.socialSecurityNumber = data().deepCopy(fields()[4].schema(), other.socialSecurityNumber);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.birthDate)) {
        this.birthDate = data().deepCopy(fields()[5].schema(), other.birthDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.addresses)) {
        this.addresses = data().deepCopy(fields()[6].schema(), other.addresses);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.created)) {
        this.created = data().deepCopy(fields()[7].schema(), other.created);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.updated)) {
        this.updated = data().deepCopy(fields()[8].schema(), other.updated);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.source)) {
        this.source = data().deepCopy(fields()[9].schema(), other.source);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sourceType)) {
        this.sourceType = data().deepCopy(fields()[10].schema(), other.sourceType);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.sourceId)) {
        this.sourceId = data().deepCopy(fields()[11].schema(), other.sourceId);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstName' field.
      * @return The value.
      */
    public java.lang.String getFirstName() {
      return firstName;
    }


    /**
      * Sets the value of the 'firstName' field.
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder setFirstName(java.lang.String value) {
      validate(fields()[1], value);
      this.firstName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'firstName' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleName' field.
      * @return The value.
      */
    public java.lang.String getMiddleName() {
      return middleName;
    }


    /**
      * Sets the value of the 'middleName' field.
      * @param value The value of 'middleName'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder setMiddleName(java.lang.String value) {
      validate(fields()[2], value);
      this.middleName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'middleName' field has been set.
      * @return True if the 'middleName' field has been set, false otherwise.
      */
    public boolean hasMiddleName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'middleName' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder clearMiddleName() {
      middleName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * @return The value.
      */
    public java.lang.String getLastName() {
      return lastName;
    }


    /**
      * Sets the value of the 'lastName' field.
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder setLastName(java.lang.String value) {
      validate(fields()[3], value);
      this.lastName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lastName' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'socialSecurityNumber' field.
      * @return The value.
      */
    public java.lang.String getSocialSecurityNumber() {
      return socialSecurityNumber;
    }


    /**
      * Sets the value of the 'socialSecurityNumber' field.
      * @param value The value of 'socialSecurityNumber'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder setSocialSecurityNumber(java.lang.String value) {
      validate(fields()[4], value);
      this.socialSecurityNumber = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'socialSecurityNumber' field has been set.
      * @return True if the 'socialSecurityNumber' field has been set, false otherwise.
      */
    public boolean hasSocialSecurityNumber() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'socialSecurityNumber' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder clearSocialSecurityNumber() {
      socialSecurityNumber = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'birthDate' field.
      * @return The value.
      */
    public java.time.LocalDate getBirthDate() {
      return birthDate;
    }


    /**
      * Sets the value of the 'birthDate' field.
      * @param value The value of 'birthDate'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder setBirthDate(java.time.LocalDate value) {
      validate(fields()[5], value);
      this.birthDate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'birthDate' field has been set.
      * @return True if the 'birthDate' field has been set, false otherwise.
      */
    public boolean hasBirthDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'birthDate' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder clearBirthDate() {
      birthDate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'addresses' field.
      * @return The value.
      */
    public java.util.List<com.mycompany.kafka.model.canonical.ContactAddress> getAddresses() {
      return addresses;
    }


    /**
      * Sets the value of the 'addresses' field.
      * @param value The value of 'addresses'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder setAddresses(java.util.List<com.mycompany.kafka.model.canonical.ContactAddress> value) {
      validate(fields()[6], value);
      this.addresses = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'addresses' field has been set.
      * @return True if the 'addresses' field has been set, false otherwise.
      */
    public boolean hasAddresses() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'addresses' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder clearAddresses() {
      addresses = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'created' field.
      * @return The value.
      */
    public java.time.Instant getCreated() {
      return created;
    }


    /**
      * Sets the value of the 'created' field.
      * @param value The value of 'created'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder setCreated(java.time.Instant value) {
      validate(fields()[7], value);
      this.created = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'created' field has been set.
      * @return True if the 'created' field has been set, false otherwise.
      */
    public boolean hasCreated() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'created' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder clearCreated() {
      created = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'updated' field.
      * @return The value.
      */
    public java.time.Instant getUpdated() {
      return updated;
    }


    /**
      * Sets the value of the 'updated' field.
      * @param value The value of 'updated'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder setUpdated(java.time.Instant value) {
      validate(fields()[8], value);
      this.updated = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'updated' field has been set.
      * @return True if the 'updated' field has been set, false otherwise.
      */
    public boolean hasUpdated() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'updated' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder clearUpdated() {
      updated = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.String getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder setSource(java.lang.String value) {
      validate(fields()[9], value);
      this.source = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder clearSource() {
      source = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceType' field.
      * @return The value.
      */
    public java.lang.String getSourceType() {
      return sourceType;
    }


    /**
      * Sets the value of the 'sourceType' field.
      * @param value The value of 'sourceType'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder setSourceType(java.lang.String value) {
      validate(fields()[10], value);
      this.sourceType = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceType' field has been set.
      * @return True if the 'sourceType' field has been set, false otherwise.
      */
    public boolean hasSourceType() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'sourceType' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder clearSourceType() {
      sourceType = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceId' field.
      * @return The value.
      */
    public java.lang.String getSourceId() {
      return sourceId;
    }


    /**
      * Sets the value of the 'sourceId' field.
      * @param value The value of 'sourceId'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder setSourceId(java.lang.String value) {
      validate(fields()[11], value);
      this.sourceId = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceId' field has been set.
      * @return True if the 'sourceId' field has been set, false otherwise.
      */
    public boolean hasSourceId() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'sourceId' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.Contact.Builder clearSourceId() {
      sourceId = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Contact build() {
      try {
        Contact record = new Contact();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.firstName = fieldSetFlags()[1] ? this.firstName : (java.lang.String) defaultValue(fields()[1]);
        record.middleName = fieldSetFlags()[2] ? this.middleName : (java.lang.String) defaultValue(fields()[2]);
        record.lastName = fieldSetFlags()[3] ? this.lastName : (java.lang.String) defaultValue(fields()[3]);
        record.socialSecurityNumber = fieldSetFlags()[4] ? this.socialSecurityNumber : (java.lang.String) defaultValue(fields()[4]);
        record.birthDate = fieldSetFlags()[5] ? this.birthDate : (java.time.LocalDate) defaultValue(fields()[5]);
        record.addresses = fieldSetFlags()[6] ? this.addresses : (java.util.List<com.mycompany.kafka.model.canonical.ContactAddress>) defaultValue(fields()[6]);
        record.created = fieldSetFlags()[7] ? this.created : (java.time.Instant) defaultValue(fields()[7]);
        record.updated = fieldSetFlags()[8] ? this.updated : (java.time.Instant) defaultValue(fields()[8]);
        record.source = fieldSetFlags()[9] ? this.source : (java.lang.String) defaultValue(fields()[9]);
        record.sourceType = fieldSetFlags()[10] ? this.sourceType : (java.lang.String) defaultValue(fields()[10]);
        record.sourceId = fieldSetFlags()[11] ? this.sourceId : (java.lang.String) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Contact>
    WRITER$ = (org.apache.avro.io.DatumWriter<Contact>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Contact>
    READER$ = (org.apache.avro.io.DatumReader<Contact>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










