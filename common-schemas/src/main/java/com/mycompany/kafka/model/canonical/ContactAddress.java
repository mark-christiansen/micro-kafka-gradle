/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mycompany.kafka.model.canonical;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class ContactAddress extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4271913130556077216L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ContactAddress\",\"namespace\":\"com.mycompany.kafka.model.canonical\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"contactId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"addressLine1\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"addressLine2\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"addressLine3\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"city\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"state\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"postalCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"created\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"updated\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"sourceType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"sourceId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<ContactAddress> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ContactAddress> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ContactAddress> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ContactAddress> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ContactAddress> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ContactAddress to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ContactAddress from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ContactAddress instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ContactAddress fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private java.lang.String contactId;
  private java.lang.String addressLine1;
  private java.lang.String addressLine2;
  private java.lang.String addressLine3;
  private java.lang.String city;
  private java.lang.String state;
  private java.lang.String country;
  private java.lang.String postalCode;
  private java.time.Instant created;
  private java.time.Instant updated;
  private java.lang.String source;
  private java.lang.String sourceType;
  private java.lang.String sourceId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ContactAddress() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param contactId The new value for contactId
   * @param addressLine1 The new value for addressLine1
   * @param addressLine2 The new value for addressLine2
   * @param addressLine3 The new value for addressLine3
   * @param city The new value for city
   * @param state The new value for state
   * @param country The new value for country
   * @param postalCode The new value for postalCode
   * @param created The new value for created
   * @param updated The new value for updated
   * @param source The new value for source
   * @param sourceType The new value for sourceType
   * @param sourceId The new value for sourceId
   */
  public ContactAddress(java.lang.String id, java.lang.String contactId, java.lang.String addressLine1, java.lang.String addressLine2, java.lang.String addressLine3, java.lang.String city, java.lang.String state, java.lang.String country, java.lang.String postalCode, java.time.Instant created, java.time.Instant updated, java.lang.String source, java.lang.String sourceType, java.lang.String sourceId) {
    this.id = id;
    this.contactId = contactId;
    this.addressLine1 = addressLine1;
    this.addressLine2 = addressLine2;
    this.addressLine3 = addressLine3;
    this.city = city;
    this.state = state;
    this.country = country;
    this.postalCode = postalCode;
    this.created = created;
    this.updated = updated;
    this.source = source;
    this.sourceType = sourceType;
    this.sourceId = sourceId;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return contactId;
    case 2: return addressLine1;
    case 3: return addressLine2;
    case 4: return addressLine3;
    case 5: return city;
    case 6: return state;
    case 7: return country;
    case 8: return postalCode;
    case 9: return created;
    case 10: return updated;
    case 11: return source;
    case 12: return sourceType;
    case 13: return sourceId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: contactId = value$ != null ? value$.toString() : null; break;
    case 2: addressLine1 = value$ != null ? value$.toString() : null; break;
    case 3: addressLine2 = value$ != null ? value$.toString() : null; break;
    case 4: addressLine3 = value$ != null ? value$.toString() : null; break;
    case 5: city = value$ != null ? value$.toString() : null; break;
    case 6: state = value$ != null ? value$.toString() : null; break;
    case 7: country = value$ != null ? value$.toString() : null; break;
    case 8: postalCode = value$ != null ? value$.toString() : null; break;
    case 9: created = (java.time.Instant)value$; break;
    case 10: updated = (java.time.Instant)value$; break;
    case 11: source = value$ != null ? value$.toString() : null; break;
    case 12: sourceType = value$ != null ? value$.toString() : null; break;
    case 13: sourceId = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'contactId' field.
   * @return The value of the 'contactId' field.
   */
  public java.lang.String getContactId() {
    return contactId;
  }


  /**
   * Sets the value of the 'contactId' field.
   * @param value the value to set.
   */
  public void setContactId(java.lang.String value) {
    this.contactId = value;
  }

  /**
   * Gets the value of the 'addressLine1' field.
   * @return The value of the 'addressLine1' field.
   */
  public java.lang.String getAddressLine1() {
    return addressLine1;
  }


  /**
   * Sets the value of the 'addressLine1' field.
   * @param value the value to set.
   */
  public void setAddressLine1(java.lang.String value) {
    this.addressLine1 = value;
  }

  /**
   * Gets the value of the 'addressLine2' field.
   * @return The value of the 'addressLine2' field.
   */
  public java.lang.String getAddressLine2() {
    return addressLine2;
  }


  /**
   * Sets the value of the 'addressLine2' field.
   * @param value the value to set.
   */
  public void setAddressLine2(java.lang.String value) {
    this.addressLine2 = value;
  }

  /**
   * Gets the value of the 'addressLine3' field.
   * @return The value of the 'addressLine3' field.
   */
  public java.lang.String getAddressLine3() {
    return addressLine3;
  }


  /**
   * Sets the value of the 'addressLine3' field.
   * @param value the value to set.
   */
  public void setAddressLine3(java.lang.String value) {
    this.addressLine3 = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.String getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.String value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.String getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.String value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.String getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.String value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'postalCode' field.
   * @return The value of the 'postalCode' field.
   */
  public java.lang.String getPostalCode() {
    return postalCode;
  }


  /**
   * Sets the value of the 'postalCode' field.
   * @param value the value to set.
   */
  public void setPostalCode(java.lang.String value) {
    this.postalCode = value;
  }

  /**
   * Gets the value of the 'created' field.
   * @return The value of the 'created' field.
   */
  public java.time.Instant getCreated() {
    return created;
  }


  /**
   * Sets the value of the 'created' field.
   * @param value the value to set.
   */
  public void setCreated(java.time.Instant value) {
    this.created = value;
  }

  /**
   * Gets the value of the 'updated' field.
   * @return The value of the 'updated' field.
   */
  public java.time.Instant getUpdated() {
    return updated;
  }


  /**
   * Sets the value of the 'updated' field.
   * @param value the value to set.
   */
  public void setUpdated(java.time.Instant value) {
    this.updated = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.String getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.String value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'sourceType' field.
   * @return The value of the 'sourceType' field.
   */
  public java.lang.String getSourceType() {
    return sourceType;
  }


  /**
   * Sets the value of the 'sourceType' field.
   * @param value the value to set.
   */
  public void setSourceType(java.lang.String value) {
    this.sourceType = value;
  }

  /**
   * Gets the value of the 'sourceId' field.
   * @return The value of the 'sourceId' field.
   */
  public java.lang.String getSourceId() {
    return sourceId;
  }


  /**
   * Sets the value of the 'sourceId' field.
   * @param value the value to set.
   */
  public void setSourceId(java.lang.String value) {
    this.sourceId = value;
  }

  /**
   * Creates a new ContactAddress RecordBuilder.
   * @return A new ContactAddress RecordBuilder
   */
  public static com.mycompany.kafka.model.canonical.ContactAddress.Builder newBuilder() {
    return new com.mycompany.kafka.model.canonical.ContactAddress.Builder();
  }

  /**
   * Creates a new ContactAddress RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ContactAddress RecordBuilder
   */
  public static com.mycompany.kafka.model.canonical.ContactAddress.Builder newBuilder(com.mycompany.kafka.model.canonical.ContactAddress.Builder other) {
    if (other == null) {
      return new com.mycompany.kafka.model.canonical.ContactAddress.Builder();
    } else {
      return new com.mycompany.kafka.model.canonical.ContactAddress.Builder(other);
    }
  }

  /**
   * Creates a new ContactAddress RecordBuilder by copying an existing ContactAddress instance.
   * @param other The existing instance to copy.
   * @return A new ContactAddress RecordBuilder
   */
  public static com.mycompany.kafka.model.canonical.ContactAddress.Builder newBuilder(com.mycompany.kafka.model.canonical.ContactAddress other) {
    if (other == null) {
      return new com.mycompany.kafka.model.canonical.ContactAddress.Builder();
    } else {
      return new com.mycompany.kafka.model.canonical.ContactAddress.Builder(other);
    }
  }

  /**
   * RecordBuilder for ContactAddress instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ContactAddress>
    implements org.apache.avro.data.RecordBuilder<ContactAddress> {

    private java.lang.String id;
    private java.lang.String contactId;
    private java.lang.String addressLine1;
    private java.lang.String addressLine2;
    private java.lang.String addressLine3;
    private java.lang.String city;
    private java.lang.String state;
    private java.lang.String country;
    private java.lang.String postalCode;
    private java.time.Instant created;
    private java.time.Instant updated;
    private java.lang.String source;
    private java.lang.String sourceType;
    private java.lang.String sourceId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mycompany.kafka.model.canonical.ContactAddress.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.contactId)) {
        this.contactId = data().deepCopy(fields()[1].schema(), other.contactId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.addressLine1)) {
        this.addressLine1 = data().deepCopy(fields()[2].schema(), other.addressLine1);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.addressLine2)) {
        this.addressLine2 = data().deepCopy(fields()[3].schema(), other.addressLine2);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.addressLine3)) {
        this.addressLine3 = data().deepCopy(fields()[4].schema(), other.addressLine3);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.city)) {
        this.city = data().deepCopy(fields()[5].schema(), other.city);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.state)) {
        this.state = data().deepCopy(fields()[6].schema(), other.state);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.country)) {
        this.country = data().deepCopy(fields()[7].schema(), other.country);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.postalCode)) {
        this.postalCode = data().deepCopy(fields()[8].schema(), other.postalCode);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.created)) {
        this.created = data().deepCopy(fields()[9].schema(), other.created);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.updated)) {
        this.updated = data().deepCopy(fields()[10].schema(), other.updated);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.source)) {
        this.source = data().deepCopy(fields()[11].schema(), other.source);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.sourceType)) {
        this.sourceType = data().deepCopy(fields()[12].schema(), other.sourceType);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.sourceId)) {
        this.sourceId = data().deepCopy(fields()[13].schema(), other.sourceId);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing ContactAddress instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mycompany.kafka.model.canonical.ContactAddress other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.contactId)) {
        this.contactId = data().deepCopy(fields()[1].schema(), other.contactId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.addressLine1)) {
        this.addressLine1 = data().deepCopy(fields()[2].schema(), other.addressLine1);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.addressLine2)) {
        this.addressLine2 = data().deepCopy(fields()[3].schema(), other.addressLine2);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.addressLine3)) {
        this.addressLine3 = data().deepCopy(fields()[4].schema(), other.addressLine3);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.city)) {
        this.city = data().deepCopy(fields()[5].schema(), other.city);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.state)) {
        this.state = data().deepCopy(fields()[6].schema(), other.state);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.country)) {
        this.country = data().deepCopy(fields()[7].schema(), other.country);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.postalCode)) {
        this.postalCode = data().deepCopy(fields()[8].schema(), other.postalCode);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.created)) {
        this.created = data().deepCopy(fields()[9].schema(), other.created);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.updated)) {
        this.updated = data().deepCopy(fields()[10].schema(), other.updated);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.source)) {
        this.source = data().deepCopy(fields()[11].schema(), other.source);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.sourceType)) {
        this.sourceType = data().deepCopy(fields()[12].schema(), other.sourceType);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.sourceId)) {
        this.sourceId = data().deepCopy(fields()[13].schema(), other.sourceId);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'contactId' field.
      * @return The value.
      */
    public java.lang.String getContactId() {
      return contactId;
    }


    /**
      * Sets the value of the 'contactId' field.
      * @param value The value of 'contactId'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder setContactId(java.lang.String value) {
      validate(fields()[1], value);
      this.contactId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'contactId' field has been set.
      * @return True if the 'contactId' field has been set, false otherwise.
      */
    public boolean hasContactId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'contactId' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder clearContactId() {
      contactId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'addressLine1' field.
      * @return The value.
      */
    public java.lang.String getAddressLine1() {
      return addressLine1;
    }


    /**
      * Sets the value of the 'addressLine1' field.
      * @param value The value of 'addressLine1'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder setAddressLine1(java.lang.String value) {
      validate(fields()[2], value);
      this.addressLine1 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'addressLine1' field has been set.
      * @return True if the 'addressLine1' field has been set, false otherwise.
      */
    public boolean hasAddressLine1() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'addressLine1' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder clearAddressLine1() {
      addressLine1 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'addressLine2' field.
      * @return The value.
      */
    public java.lang.String getAddressLine2() {
      return addressLine2;
    }


    /**
      * Sets the value of the 'addressLine2' field.
      * @param value The value of 'addressLine2'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder setAddressLine2(java.lang.String value) {
      validate(fields()[3], value);
      this.addressLine2 = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'addressLine2' field has been set.
      * @return True if the 'addressLine2' field has been set, false otherwise.
      */
    public boolean hasAddressLine2() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'addressLine2' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder clearAddressLine2() {
      addressLine2 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'addressLine3' field.
      * @return The value.
      */
    public java.lang.String getAddressLine3() {
      return addressLine3;
    }


    /**
      * Sets the value of the 'addressLine3' field.
      * @param value The value of 'addressLine3'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder setAddressLine3(java.lang.String value) {
      validate(fields()[4], value);
      this.addressLine3 = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'addressLine3' field has been set.
      * @return True if the 'addressLine3' field has been set, false otherwise.
      */
    public boolean hasAddressLine3() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'addressLine3' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder clearAddressLine3() {
      addressLine3 = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.String getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder setCity(java.lang.String value) {
      validate(fields()[5], value);
      this.city = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder clearCity() {
      city = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.String getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder setState(java.lang.String value) {
      validate(fields()[6], value);
      this.state = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder clearState() {
      state = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.String getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder setCountry(java.lang.String value) {
      validate(fields()[7], value);
      this.country = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder clearCountry() {
      country = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'postalCode' field.
      * @return The value.
      */
    public java.lang.String getPostalCode() {
      return postalCode;
    }


    /**
      * Sets the value of the 'postalCode' field.
      * @param value The value of 'postalCode'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder setPostalCode(java.lang.String value) {
      validate(fields()[8], value);
      this.postalCode = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'postalCode' field has been set.
      * @return True if the 'postalCode' field has been set, false otherwise.
      */
    public boolean hasPostalCode() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'postalCode' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder clearPostalCode() {
      postalCode = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'created' field.
      * @return The value.
      */
    public java.time.Instant getCreated() {
      return created;
    }


    /**
      * Sets the value of the 'created' field.
      * @param value The value of 'created'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder setCreated(java.time.Instant value) {
      validate(fields()[9], value);
      this.created = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'created' field has been set.
      * @return True if the 'created' field has been set, false otherwise.
      */
    public boolean hasCreated() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'created' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder clearCreated() {
      created = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'updated' field.
      * @return The value.
      */
    public java.time.Instant getUpdated() {
      return updated;
    }


    /**
      * Sets the value of the 'updated' field.
      * @param value The value of 'updated'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder setUpdated(java.time.Instant value) {
      validate(fields()[10], value);
      this.updated = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'updated' field has been set.
      * @return True if the 'updated' field has been set, false otherwise.
      */
    public boolean hasUpdated() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'updated' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder clearUpdated() {
      updated = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.String getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder setSource(java.lang.String value) {
      validate(fields()[11], value);
      this.source = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder clearSource() {
      source = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceType' field.
      * @return The value.
      */
    public java.lang.String getSourceType() {
      return sourceType;
    }


    /**
      * Sets the value of the 'sourceType' field.
      * @param value The value of 'sourceType'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder setSourceType(java.lang.String value) {
      validate(fields()[12], value);
      this.sourceType = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceType' field has been set.
      * @return True if the 'sourceType' field has been set, false otherwise.
      */
    public boolean hasSourceType() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'sourceType' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder clearSourceType() {
      sourceType = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceId' field.
      * @return The value.
      */
    public java.lang.String getSourceId() {
      return sourceId;
    }


    /**
      * Sets the value of the 'sourceId' field.
      * @param value The value of 'sourceId'.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder setSourceId(java.lang.String value) {
      validate(fields()[13], value);
      this.sourceId = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceId' field has been set.
      * @return True if the 'sourceId' field has been set, false otherwise.
      */
    public boolean hasSourceId() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'sourceId' field.
      * @return This builder.
      */
    public com.mycompany.kafka.model.canonical.ContactAddress.Builder clearSourceId() {
      sourceId = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ContactAddress build() {
      try {
        ContactAddress record = new ContactAddress();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.contactId = fieldSetFlags()[1] ? this.contactId : (java.lang.String) defaultValue(fields()[1]);
        record.addressLine1 = fieldSetFlags()[2] ? this.addressLine1 : (java.lang.String) defaultValue(fields()[2]);
        record.addressLine2 = fieldSetFlags()[3] ? this.addressLine2 : (java.lang.String) defaultValue(fields()[3]);
        record.addressLine3 = fieldSetFlags()[4] ? this.addressLine3 : (java.lang.String) defaultValue(fields()[4]);
        record.city = fieldSetFlags()[5] ? this.city : (java.lang.String) defaultValue(fields()[5]);
        record.state = fieldSetFlags()[6] ? this.state : (java.lang.String) defaultValue(fields()[6]);
        record.country = fieldSetFlags()[7] ? this.country : (java.lang.String) defaultValue(fields()[7]);
        record.postalCode = fieldSetFlags()[8] ? this.postalCode : (java.lang.String) defaultValue(fields()[8]);
        record.created = fieldSetFlags()[9] ? this.created : (java.time.Instant) defaultValue(fields()[9]);
        record.updated = fieldSetFlags()[10] ? this.updated : (java.time.Instant) defaultValue(fields()[10]);
        record.source = fieldSetFlags()[11] ? this.source : (java.lang.String) defaultValue(fields()[11]);
        record.sourceType = fieldSetFlags()[12] ? this.sourceType : (java.lang.String) defaultValue(fields()[12]);
        record.sourceId = fieldSetFlags()[13] ? this.sourceId : (java.lang.String) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ContactAddress>
    WRITER$ = (org.apache.avro.io.DatumWriter<ContactAddress>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ContactAddress>
    READER$ = (org.apache.avro.io.DatumReader<ContactAddress>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










