version: '3.5'
services:

  ################## KAFKA ##################

  zoo1:
    image: confluentinc/cp-zookeeper:${CONFLUENT_VERSION}
    hostname: zoo1.${DOMAIN}
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVERS: zoo1.${DOMAIN}:2888:3888
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: DEBUG
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=*"
      KAFKA_HEAP_OPTS: "-Xms${ZK_HEAP} -Xmx${ZK_HEAP}"
    volumes:
      - ./volumes/zoo-1/data:/var/lib/zookeeper/data
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "bash", "-c", "(echo ruok | nc zoo1.${DOMAIN} 2181) | grep -e imok"]
      start_period: 5s
      interval: 20s
      timeout: 10s
      retries: 20

  kafka1:
    image: confluentinc/cp-server:${CONFLUENT_VERSION}
    hostname: kafka1.${DOMAIN}
    container_name: kafka1
    ulimits:
      nofile:
        soft: 82920
        hard: 82920
    links:
      - zoo1
    depends_on:
      zoo1:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      # zookeeper
      KAFKA_ZOOKEEPER_CONNECT: zoo1.${DOMAIN}:2181
      KAFKA_ZOOKEEPER_CLIENT_CNXN_SOCKET: org.apache.zookeeper.ClientCnxnSocketNetty
      # listeners
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1.${DOMAIN}:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENERS: INTERNAL://kafka1.${DOMAIN}:29092,EXTERNAL://kafka1.${DOMAIN}:9092
      KAFKA_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_CONFLUENT_BALANCER_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      # metrics reporter
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:29092
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: PLAINTEXT
      # cluster linking
      CONFLUENT_CLUSTER_LINK_METADATA_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_PASSWORD_ENCODER_SECRET: cl-secret
      # logging
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_LOG4J_LOGGERS: kafka.authorizer.logger=INFO
      #KAFKA_OPTS: '-Djavax.net.debug=ssl'
      #KAFKA_JMX_PORT: 9010
      #KAFKA_JMX_HOSTNAME: localhost
      KAFKA_HEAP_OPTS: "-Xms${BROKER_HEAP} -Xmx${BROKER_HEAP}"
    volumes:
      - ./volumes/kafka-1/data:/var/lib/kafka/data
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-cluster cluster-id --bootstrap-server kafka1.${DOMAIN}:29092 | grep -e 'Cluster ID: .*'"]
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 10

  schema1:
    image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION}
    hostname: schema1.${DOMAIN}
    container_name: schema1
    links:
      - kafka1
    depends_on:
      kafka1:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: 'schema1'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8081'
      # kafka store
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka1.${DOMAIN}:29092'
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: 'PLAINTEXT'
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: '_schemas'
      SCHEMA_REGISTRY_KAFKASTORE_ZK_SESSION_TIMEOUT_MS: 60000
      SCHEMA_REGISTRY_KAFKASTORE_TIMEOUT_MS: 10000
      SCHEMA_REGISTRY_KAFKASTORE_INIT_TIMEOUT_MS: 120000
      # other
      SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: 'http'
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_GROUP_ID: 'schema-registry'
      SCHEMA_REGISTRY_LEADER_ELIGIBILITY: 'true'
      SCHEMA_REGISTRY_MODE_MUTABILITY: 'true'
      SCHEMA_REGISTRY_DEBUG: 'true'
      KAFKA_HEAP_OPTS: "-Xms${SCHEMA_HEAP} -Xmx${SCHEMA_HEAP}"
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "bash", "-c", "curl http://schema1.${DOMAIN}:8081/subjects"]
      interval: 10s
      timeout: 10s
      retries: 20

  ################## CLIENT ##################

  client:
    image: kafka-client:0.0.1
    build: ./client
    hostname: client.${DOMAIN}
    container_name: client
    links:
      - schema1
    depends_on:
      schema1:
        condition: service_healthy
    command:
      - bash
      - -c
      - |
        touch /tmp/initialized
        tail -f /dev/null
    volumes:
      - ./client/scripts:/scripts
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "bash", "-c", "find /tmp/initialized"]
      start_period: 60s
      interval: 15s
      timeout: 15s
      retries: 30

  ################## DATABASE ##################

  postgres:
    image: postgres:latest
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/postgres/data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: cda
      POSTGRES_USER: kafka-connect-user
      POSTGRES_PASSWORD: K@fk@Conn3ct!
    networks:
      - kafka-network

  ################## CLIENTS ##################

  producer:
    image: producer:latest
    hostname: producer
    container_name: producer
    links:
      - schema1
    depends_on:
      schema1:
        condition: service_healthy
    ports:
      - "8800:8080"
    environment:
      BOOTSTRAP_URL: kafka1:29092
      SCHEMA_URL: http://schema1:8081
      CLIENT_ID: kafka-producer
      TOPIC: customer
      SCHEMA: customer
      MESSAGES: 100
      BATCH_SIZE: 1
      FREQUENCY_MS: 1000
      SCHEMAS_PATH: /schemas
    volumes:
      - ./volumes/producer/schemas:/schemas
    networks:
      - kafka-network

  streams:
    image: streams:latest
    hostname: streams
    container_name: streams
    links:
      - schema1
    depends_on:
      schema1:
        condition: service_healthy
    ports:
      - "8801:8080"
    environment:
      BOOTSTRAP_URL: kafka1:29092
      SCHEMA_URL: http://schema1:8081
      APP_ID: kafka-streams
      GROUP_ID: kafka-streams
      INPUT_TOPIC: customer
      OUTPUT_TOPIC: customer.transformed
      ERROR_TOPIC: customer.error
      IN_MEMORY_STATE: false
      STREAM_TYPE: stateless
      STATE_DIR: /kafka-streams/data
    volumes:
      - ./volumes/kafka-streams:/kafka-streams/data
    networks:
      - kafka-network

  consumer:
    image: consumer:latest
    hostname: consumer
    container_name: consumer
    links:
      - schema1
    depends_on:
      schema1:
        condition: service_healthy
    ports:
      - "8802:8080"
    environment:
      BOOTSTRAP_URL: kafka1:29092
      SCHEMA_URL: http://schema1:8081
      CLIENT_ID: kafka-consumer
      GROUP_ID: kafka-consumer
      TOPIC: customer.transformed
      OFFSET_DAYS: 1
      POLL_TIMEOUT_SECS: 5
      COMMIT_TIMEOUT_SECS: 5
    networks:
      - kafka-network

networks:
  kafka-network:
    name: ${DOMAIN}